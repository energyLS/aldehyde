import os
from shutil import copyfile, move
import yaml

from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
HTTP = HTTPRemoteProvider()


configfile: "../config/config.yaml"

wildcard_constraints:
    ll="[a-z0-9\.]+",
    simpl="[a-zA-Z0-9]*|all",
    clusters="[0-9]+m?|all",
    opts="[-+a-zA-Z0-9\.\s]*",
    sopts="[-+a-zA-Z0-9\.\s]*",
    discountrate="[-+a-zA-Z0-9\.\s]*",
    demand="[-+a-zA-Z0-9\.\s]*",
    h2export="[0-9]+m?|all",


# Define the results directory of PyPSA-Earth-Sec
with open("../config/config.pypsa-earth-sec.yaml") as file:
    config_pypsaearthsec = yaml.full_load(file)

PYPSAEARTHSEC_FOLDER = "./subworkflows/pypsa-earth-sec"

RDIR_pypsaearthsec = config_pypsaearthsec["results_dir"] + config_pypsaearthsec["run"]
SDIR_pypsaearthsec = config_pypsaearthsec["summary_dir"] + config_pypsaearthsec["run"]



localrules: all, report, clean

rule all:
    message: "Run entire analysis and compile report."
    input:
        "../report/report.pdf",

if config.get("retrieve_cost_data", True):

    rule retrieve_cost_data:
        input:
            HTTP.remote(
                f"raw.githubusercontent.com/PyPSA/technology-data/{config['costs']['version']}/outputs/costs_{config['costs']['year']}.csv",
                keep_local=True,
            ),
        output:
            "../resources/costs.csv"
        run:
            move(input[0], output[0])

# Include module "PyPSA-Earth-Sec"
# Goal: use the PyPSA-Earth-Sec module to solve the network and copy it to aldehyde repository
# Goal: have own config that is used for the PyPSA-Earth-Sec module
# Problem: can't find config file

# module pypsaearthsec:
#     snakefile: "/mnt/c/Users/scl38887/Documents/git/pypsa-earth-sec/Snakefile"
#     config: config["pypsaearthsec"] # Use default config of pypsa-earth-sec. TODO: use config of aldehyde

# use rule * from pypsaearthsec as pypsaearthsec_*

subworkflow pypsaearthsec:
    workdir:
        PYPSAEARTHSEC_FOLDER
    snakefile:
        PYPSAEARTHSEC_FOLDER + "/Snakefile"
    configfile:
        "../config/config.pypsa-earth-sec.yaml"


# Solve (in pypsa-earth-sec) all the networks which are required according to the config.yaml and copy them to the resources folder in this aldehyde repo
# Retrieve the wildcards from config.pypsa-earth-sec.yaml
if config.get("import_pypsaearthsec", False):

    rule import_pypsaearthsec:
        input:
            pypsaearthsec(
                expand(RDIR_pypsaearthsec + "/postnetworks/elec_s{simpl}_{clusters}_ec_l{ll}_{opts}_{sopts}_{planning_horizons}_{discountrate}_{demand}_{h2export}export.nc",
                    **config["scenario"],
                    **config["costs_pypsaearthsec"],
                    **config["export"],
                ),
            )
        output:
            expand("../resources/pypsaearthsec/" + config_pypsaearthsec["run"] +"/postnetworks/elec_s{simpl}_{clusters}_ec_l{ll}_{opts}_{sopts}_{planning_horizons}_{discountrate}_{demand}_{h2export}export.nc",
                **config["scenario"],
                **config["costs_pypsaearthsec"],
                **config["export"],
            ),
        run:
            for i in range(len(input)):
                copyfile(input[i], output[i])

# TODO Taking the already solved networks. Could be more failsave, to take pre-networks from PyPSA-Earth-Sec
rule clean_network:
    input:
        network="../resources/pypsaearthsec/" + config_pypsaearthsec["run"] +"/postnetworks/elec_s{simpl}_{clusters}_ec_l{ll}_{opts}_{sopts}_{planning_horizons}_{discountrate}_{demand}_{h2export}export.nc",
        overrides="../data/override_component_attrs",
    output:
        network="../resources/clean/" + config_pypsaearthsec["run"] +"/elec_s{simpl}_{clusters}_ec_l{ll}_{opts}_{sopts}_{planning_horizons}_{discountrate}_{demand}_{h2export}export_cleaned.nc"
    script:
        "scripts/clean_network.py"


rule add_esc:
    input:
        network="../resources/clean/" + config_pypsaearthsec["run"] +"/elec_s{simpl}_{clusters}_ec_l{ll}_{opts}_{sopts}_{planning_horizons}_{discountrate}_{demand}_{h2export}export_cleaned.nc",
        overrides="../data/override_component_attrs",
        tech_costs="../resources/costs.csv",
        shapes_path="../resources/shapes/gadm_shapes.geojson",
    output:
        network="../resources/export_only/" + config_pypsaearthsec["run"] +"/elec_s{simpl}_{clusters}_ec_l{ll}_{opts}_{sopts}_{planning_horizons}_{discountrate}_{demand}_{h2export}export_esc.nc"

    script:
        "scripts/add_esc.py"


rule solve_network:
    input:
        network="../resources/export_only/" + config_pypsaearthsec["run"] +"/elec_s{simpl}_{clusters}_ec_l{ll}_{opts}_{sopts}_{planning_horizons}_{discountrate}_{demand}_{h2export}export_esc.nc",
        overrides="../data/override_component_attrs",
    output:
        network="../resources/export_only/" + config_pypsaearthsec["run"] +"/elec_s{simpl}_{clusters}_ec_l{ll}_{opts}_{sopts}_{planning_horizons}_{discountrate}_{demand}_{h2export}export_solved.nc"
    script:
        "scripts/solve_network.py"


rule compare_networks:
    input:
        # expand("../resources/export_only/" + config_pypsaearthsec["run"] +"/elec_s{simpl}_{clusters}_ec_l{ll}_{opts}_{sopts}_{planning_horizons}_{discountrate}_{demand}_{h2export}export_solved.nc",
        #     **config["compare_networks"]
        # ),
        network_mar_es_export = "../resources/pypsaearthsec/" + config_pypsaearthsec["run"] +"/postnetworks/elec_s_{clusters}_ec_lc1.0_{opts}_6H_2030_0.071_DF_{h2export}export.nc",
        network_mar_es_only = "../resources/pypsaearthsec/" + config_pypsaearthsec["run"] +"/postnetworks/elec_s_{clusters}_ec_lc1.0_{opts}_6H_2030_0.071_DF_0export.nc",
        network_export_only = "../resources/export_only/" + config_pypsaearthsec["run"] +"/elec_s_{clusters}_ec_lc1.0_{opts}_6H_2030_0.071_DF_{h2export}export_solved.nc"
    output:
        #graph_lcoh="../results/graphics/system_comp/LCOH.pdf", 
        graph_systemcost = "../results/" + config_pypsaearthsec["run"] +"/graphics/system_comp/total_system_cost_{clusters}_{opts}_{h2export}export.pdf",
    script:
        "scripts/compare_networks.py"


rule compare_all_networks:
    input:
        expand("../results/" + config_pypsaearthsec["run"] +"/graphics/system_comp/total_system_cost_{clusters}_{opts}_{h2export}export.pdf",
            clusters=10,
            opts = config["plot"]["spatial_plot"]["opts"],
            h2export=config["plot"]["spatial_plot"]["h2export"],
        ),


rule compare_integrated:
    input:
        networks=
            expand("subworkflows/pypsa-earth-sec/results/" + config_pypsaearthsec["run"] +"/postnetworks/elec_s{simpl}_{clusters}_ec_l{ll}_{opts}_{sopts}_{planning_horizons}_{discountrate}_{demand}_{h2export}export.nc",
                **config["scenario"],
                **config["costs_pypsaearthsec"],
                **config["export"],
            ),
    output:
        stats= "../results/" + config_pypsaearthsec["run"] +"/integrated_comp/stats.csv",
        #cost_plot = "../results/graphics/integrated_comp/cost.pdf",
    script:
        "scripts/compare_integrated.py"


rule test_notebook:
    input:
        network="../resources/export_only/emission_export/elec_s_10_ec_lc1.0__Co2L0.90-144H_2030_0.071_DF_20export_esc.nc"
    output:
        file="notebooks/test.txt"
    notebook:
        "notebooks/test.py.ipynb"

rule plot_contour:
    input:
        stats= "../results/" + config_pypsaearthsec["run"] +"/integrated_comp/stats.csv",
    output:
        contour_plot="../results/" + config_pypsaearthsec["run"] +"/graphics/integrated_comp/contour_{plottype}_{levels}_filter{zerofilter}.pdf"
    script:
        "scripts/plot_contour.py"

rule plot_all_contours:
    input:
        expand("../results/" + config_pypsaearthsec["run"] +"/graphics/integrated_comp/contour_{plottype}_{levels}_filter{zerofilter}.pdf",
            plottype = config["plot"]["contour_plot"]["type"],
            levels = config["plot"]["contour_plot"]["levels"],
            zerofilter =  config["plot"]["contour_plot"]["zerofilter"]
        )

rule plot_general_figures:
    input:
        gadm_shapes="../resources/shapes/gadm_shapes.geojson"
    output:
        morocco_em="../results/graphics_general/morocco_em.pdf",
        land_conflicts="../results/graphics_general/land_conflicts.pdf",
    script:
        "scripts/plot_figures.py"

# Note: This rule plots figures (and makes the summary) according to the wildcards in "config.pypsa-earthsec.yaml" and not
# according to the wildcards in "config.yaml"
rule plot_pypsaearthsec_summary:
    input:
        pypsaearthsec(SDIR_pypsaearthsec + "/graphs/balances-energy.pdf")

# Taken from pypsa-earth-sec
rule plot_summary:
    input:
        # costs="../workflow/subworkflows/pypsa-earth-sec/" + SDIR_pypsaearthsec + "/csvs/costs.csv",
        # energy="../workflow/subworkflows/pypsa-earth-sec/" + SDIR_pypsaearthsec + "/csvs/energy.csv",
        balances="../workflow/subworkflows/pypsa-earth-sec/" + SDIR_pypsaearthsec + "/co2l2.0-only/csvs/supply_energy.csv", #0exp-only
    output:
        # costs=SDIR_pypsaearthsec + "/graphs/costs-aldehyde.pdf",
        # energy=SDIR_pypsaearthsec + "/graphs/energy-aldehyde.pdf",
        balances="../workflow/subworkflows/pypsa-earth-sec/" + SDIR_pypsaearthsec + "/co2l2.0-only/graphs/balances-energy.pdf", #0exp-only
    threads: 2
    resources:
        mem_mb=10000,
    benchmark:
        SDIR_pypsaearthsec + "/benchmarks/plot_summary"
    script:
        "scripts/plot_summary.py"



rule plot_spatial_figures:
    input:
        regions_onshore = "../resources/shapes/regions_onshore_elec_s_{clusters}.geojson",
        network_mar_es = "../resources/pypsaearthsec/" + config_pypsaearthsec["run"] +"/postnetworks/elec_s_{clusters}_ec_lc1.0_{opts}_6H_2030_0.071_DF_{h2export}export.nc",
        #network_mar_es_only = "../resources/pypsaearthsec/" + config_pypsaearthsec["run"] +"/postnetworks/elec_s_10_ec_lc1.0_Co2L0.90_144H_2030_0.071_DF_0export.nc",
        network_export_only = "../resources/export_only/" + config_pypsaearthsec["run"] +"/elec_s_{clusters}_ec_lc1.0_{opts}_6H_2030_0.071_DF_{h2export}export_solved.nc"
        #network = "../resources/export_only/" + config_pypsaearthsec["run"] +"/elec_s_10_ec_lc1.0_Co2L0.90_144H_2030_0.071_DF_{h2export}export_solved.nc"
    output:
        #plot = "../results/" + config_pypsaearthsec["run"] +"/graphics/spatial/{plottype}_{energy_source}_{h2export}export.pdf",
        plot = "../results/" + config_pypsaearthsec["run"] +"/graphics/spatial/{network}_{clusters}_{plottype}_{energy_source}_{opts}_{h2export}export.pdf",
    script:
        "scripts/plot_spatial.py"


rule plot_all_spatial_figures:
    input:
        expand("../results/" + config_pypsaearthsec["run"] +"/graphics/spatial/{network}_{clusters}_{plottype}_{energy_source}_{opts}_{h2export}export.pdf",
            network = ["mar_es", "export_only"], #["mar_es", "export_only"],
            clusters = [4],
            energy_source = ["solar"], # ["solar", "onwind"],
            plottype = config["plot"]["spatial_plot"]["type"],
            opts = config["plot"]["spatial_plot"]["opts"],
            h2export=config["plot"]["spatial_plot"]["h2export"],
        )

# Create rule to trigger the plotting in earth sec subworkflow for certain scenarios
#rule plot_earthsec


rule report:
    message: "Compile report."
    input:
        tex="../report/report.tex",
        bib="../report/references.bib",
        morocco_em="../results/graphics_general/morocco_em.pdf", # Just a placeholder to trigger workflow
        land_conflicts="../results/graphics_general/land_conflicts.pdf",
    output: "../report/report.pdf"
    shell:
        """
        cd ../report
        pdflatex report.tex
        bibtex report
        pdflatex report.tex
        pdflatex report.tex
        cd ../workflow
        """


rule dag:
     message: "Plot dependency graph of the workflow."
     output:
         dot="../resources/dag.dot",
         pdf="../resources/dag.pdf"
     shell:
         """
         snakemake --rulegraph > {output.dot}
         dot -Tpdf -o {output.pdf} {output.dot}
         """


rule clean:
    message: "Remove all build results but keep downloaded data."
    run:
         import shutil

         shutil.rmtree("../resources")
         shutil.rmtree("../results")
         print("Data downloaded to data/ has not been cleaned.")

        
rule sync:
    params:
        cluster=config["cluster"],
    shell:
        """
        rsync -uvarh --no-g --exclude-from=.syncignore-send . {params.cluster}
        rsync -uvarh --no-g --exclude-from=.syncignore-receive {params.cluster} .
        """
