import os
from shutil import copyfile, move
import yaml

from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
HTTP = HTTPRemoteProvider()


configfile: "../config/config.yaml"


# Define the results directory of PyPSA-Earth-Sec
with open("../config/config.pypsa-earth-sec.yaml") as file:
    config_pypsaearthsec = yaml.full_load(file)

RDIR_pypsaearthsec = config_pypsaearthsec["results_dir"] + config_pypsaearthsec["run"]


localrules: all, report, clean

rule all:
    message: "Run entire analysis and compile report."
    input:
        "../report/report.pdf",

if config.get("retrieve_cost_data", True):

    rule retrieve_cost_data:
        input:
            HTTP.remote(
                f"raw.githubusercontent.com/PyPSA/technology-data/{config['costs']['version']}/outputs/costs_{config['costs']['year']}.csv",
                keep_local=True,
            ),
        output:
            "../resources/costs.csv"
        run:
            move(input[0], output[0])

# Include module "PyPSA-Earth-Sec"
# Goal: use the PyPSA-Earth-Sec module to solve the network and copy it to aldehyde repository
# Goal: have own config that is used for the PyPSA-Earth-Sec module
# Problem: can't find config file

# module pypsaearthsec:
#     snakefile: "/mnt/c/Users/scl38887/Documents/git/pypsa-earth-sec/Snakefile"
#     config: config["pypsaearthsec"] # Use default config of pypsa-earth-sec. TODO: use config of aldehyde

# use rule * from pypsaearthsec as pypsaearthsec_*

subworkflow pypsaearthsec:
    workdir:
        "../../pypsa-earth-sec"
    snakefile:
        "../../pypsa-earth-sec/Snakefile"
    configfile:
        "../config/config.pypsa-earth-sec.yaml"


# Solve (in pypsa-earth-sec) all the networks which are required according to the config.yaml and copy them to the resources folder in this aldehyde repo
# Retrieve the wildcards from config.pypsa-earth-sec.yaml
rule import_network_pypsaearthsec:
    input:
        pypsaearthsec(
            expand(RDIR_pypsaearthsec + "/postnetworks/elec_s{simpl}_{clusters}_ec_l{ll}_{opts}_{sopts}_{planning_horizons}_{discountrate}_{demand}_{h2export}export.nc",
                **config["scenario"],
                **config["costs_pypsaearthsec"],
                **config["export"],
            ),
        )
    output:
        expand("../resources/pypsaearthsec/" + config_pypsaearthsec["run"] +"/postnetworks/elec_s{simpl}_{clusters}_ec_l{ll}_{opts}_{sopts}_{planning_horizons}_{discountrate}_{demand}_{h2export}export.nc",
            **config["scenario"],
            **config["costs_pypsaearthsec"],
            **config["export"],
        ),
    run:
        for i in range(len(input)):
            copyfile(input[i], output[i])


rule import_network:
    input:
        network="../resources/mar_es_only/elec_s_4_ec_lc1.0_Co2L_144H_2030_0.071_DF.nc",
    output:
        network="../resources/export_only/elec_s_4_ec_lc1.0_Co2L_144H_2030_0.071_DF_cleaned.nc",
    script:
        "scripts/import_network.py"

rule plot_figures:
    input:
        gadm_shapes="../resources/shapes/gadm_shapes.geojson"
    output:
        morocco_em="../results/graphics/morocco_em.pdf",
        land_conflicts="../results/graphics/land_conflicts.pdf",
    script:
        "scripts/plot_figures.py"

rule add_esc:
    input:
        network="../resources/export_only/elec_s_4_ec_lc1.0_Co2L_144H_2030_0.071_DF_cleaned.nc",
        tech_costs="../resources/costs.csv",
        shapes_path="../resources/shapes/gadm_shapes.geojson",
    output:
        network="../resources/export_only/elec_s_4_ec_lc1.0_Co2L_144H_2030_0.071_DF_esc_"+str(config["export"]["export_h2"])+".nc",
    script:
        "scripts/add_esc.py"

rule solve_network:
    input:
        network="../resources/export_only/elec_s_4_ec_lc1.0_Co2L_144H_2030_0.071_DF_esc_"+str(config["export"]["export_h2"])+".nc",
    output:
        network="../resources/export_only/elec_s_4_ec_lc1.0_Co2L_144H_2030_0.071_DF_solved_"+str(config["export"]["export_h2"])+".nc",
    script:
        "scripts/solve_network.py"


rule report:
    message: "Compile report."
    input:
        tex="../report/report.tex",
        bib="../report/references.bib",
        morocco_em="../results/graphics/morocco_em.pdf", # Just a placeholder to trigger workflow
        land_conflicts="../results/graphics/land_conflicts.pdf",
    output: "../report/report.pdf"
    shell:
        """
        cd ../report
        pdflatex report.tex
        bibtex report
        pdflatex report.tex
        pdflatex report.tex
        cd ../workflow
        """


rule dag:
     message: "Plot dependency graph of the workflow."
     output:
         dot="../resources/dag.dot",
         pdf="../resources/dag.pdf"
     shell:
         """
         snakemake --rulegraph > {output.dot}
         dot -Tpdf -o {output.pdf} {output.dot}
         """


rule clean:
    message: "Remove all build results but keep downloaded data."
    run:
         import shutil

         shutil.rmtree("../resources")
         shutil.rmtree("../results")
         print("Data downloaded to data/ has not been cleaned.")

        
rule sync:
    params:
        cluster=config["cluster"],
    shell:
        """
        rsync -uvarh --no-g --exclude-from=.syncignore-send . {params.cluster}
        rsync -uvarh --no-g --exclude-from=.syncignore-receive {params.cluster} .
        """
