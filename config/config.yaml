cluster: "remote:path/on/remote"

# Path to the PyPSA-Earth-Sec repository
pypsaearthsec: "/mnt/c/Users/scl38887/Documents/git/pypsa-earth-sec/config.default.yaml"

retrieve_cost_data: False

climate_targets:
  2030_cond: 115 # in Mt CO2 (equ.?)
  2030_uncond: 75 # in Mt CO2 (equ.?)


scenario:
  simpl: # only relevant for PyPSA-Eur
  - ""
  clusters: # number of nodes in Europe, any integer between 37 (1 node per country-zone) and several hundred
  - 4
  planning_horizons: # investment years for myopic and perfect; or costs year for overnight
  - 2030
  ll:
  - "c1.0"
  opts:
  - "Co2L"
  sopts:
  - "144H"
  demand:
  - "DF"

export:
  h2export: [1, 5] # Yearly export demand in TWh. TODO This is currently necessary for PyPSA-Earth-Sec subworkflow
  export_h2: 150000000 #10000000 # Yearly export demand in MWh. TODO This is currently necessary for local aldehyde analysis


# regulate what components with which carriers are kept from PyPSA-earth-sec;
pypsa_earth:
  Line: []
  Bus:
    - AC
  Link:
    - DC
  Generator:
    - onwind
    - offwind-ac
    - offwind-dc
    - solar
    - ror
  StorageUnit: []
  Store: []
  Load: []
 # Global_Constraint: []

costs_pypsaearthsec:
  discountrate: [0.071] #, 0.086, 0.111]

costs:
  year: 2030
  version: v0.4.0
  rooftop_share: 0.14  # based on the potentials, assuming  (0.1 kW/m2 and 10 m2/person)
  fill_values:
    FOM: 0
    VOM: 0
    efficiency: 1
    fuel: 0
    investment: 0
    lifetime: 25
    "CO2 intensity": 0
    "discount rate": 0.07
  marginal_cost:
    solar: 0.01
    onwind: 0.015
    offwind: 0.015
    hydro: 0.
    H2: 0.
    electrolysis: 0.
    fuel cell: 0.
    battery: 0.
    battery inverter: 0.
  emission_prices: # in currency per tonne emission, only used with the option Ep
    co2: 0.

# this information is NOT used but needed as an argument for
# aldehyde/workflow/scripts/helpers.py/load_costs 
electricity:
  max_hours:
    battery: 6
    H2: 168